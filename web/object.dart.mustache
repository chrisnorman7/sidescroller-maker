import 'game.dart';
import 'level.dart';
import 'sound.dart';

enum ObjectTypes {
  object,
  aggressiveMonster,
  peacefulMonster,
  weapon,
  exit,
}

const Map<ObjectTypes, String> objectTypeDescriptions = <ObjectTypes, String>{
  ObjectTypes.object: 'Standard object',
  ObjectTypes.aggressiveMonster: 'Aggressive monster',
  ObjectTypes.peacefulMonster: 'Peaceful monster',
  ObjectTypes.weapon: 'Weapon',
  ObjectTypes.exit: 'An exit'
};

class GameObject {
  GameObject() {
    reset();
  }

  GameObject.fromJson(
    {
      Map<String, dynamic>data
    }
  ) {
    reset();
    type = ObjectTypes.values[data['type'] as int];
    if (data.containsKey('airborn')) {
      airborn = data['airborn'] as bool;
    }
    targetLevelIndex = data['targetLevelIndex'] as int;
    for (final dynamic containedObjectIndexData in data['contains']) {
      final int containedObjectIndex = containedObjectIndexData as int;
      containedObjectIndices.add(containedObjectIndex);
    }
    {{#variables}}
    if (data.containsKey('{{name}}')) {
      {{name}} = data['{{name}}'] as {{type}};
    }
    {{/variables}}
  }

  {{# variables}}
  {{#initialise}}
  {{type}} {{name}};
  {{/initialise}}
  {{/ variables }}

  ObjectTypes type;
  Sound take, use, cantUse;
  Level targetLevel;
  int targetLevelIndex;
  List<GameObject> contains;
  List<int> containedObjectIndices;
  bool airborn;

  Map<String, dynamic> toJson(
    {
      Game game
    }
  ) {
    final Map<String, dynamic>data = <String, dynamic>{
      'type': type.index,
      'contains': <int>[],
      'airborn': airborn,
    };
    if (targetLevel == null) {
      data['targetLevelIndex'] = null;
    } else {
      data['targetLevelIndex'] = game.levels.indexOf(targetLevel);
    }
    for (final GameObject containedObject in contains) {
      data['contains'].add(game.objects.indexOf(containedObject));
    }
    {{#variables}}
    data['{{name}}'] = {{name}};
    {{/variables}}
    return data;
  }
  
  void reset() {
    airborn = false;
    type = ObjectTypes.object;
    {{#variables}}
    {{name}} = {{value}};
    {{/variables}}
    take = Sound(url: takeUrl);
    use = Sound(url: useUrl);
    cantUse = Sound(url: cantUseUrl);
    contains = <GameObject>[];
    containedObjectIndices = <int>[];
  }

  void drop(
    {
      Level level,
      int position,
      bool silent = false,
    }
  ) {
    final LevelObject content = LevelObject(level, this, position);
    level.contents.add(content);
    content.spawn();
    if (!silent) {
      content.drop.play(url: dropUrl);
    }
  }
}
