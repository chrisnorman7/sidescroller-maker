import 'book.dart';
import 'constants.dart';
import 'level.dart';
import 'music.dart';
import 'object.dart';
import 'page.dart';
import 'sound.dart';

class Game {
  Game() {
    reset();
  }

  Game.fromJson(
    {
      Map<String, dynamic> data
    }
  ) {
    reset();
    for (final dynamic objectData in data['objects']) {
      final GameObject obj = GameObject.fromJson(
        data: objectData as Map<String, dynamic>
      );
      objects.add(obj);
    }
    for (final dynamic levelData in data['levels']) {
      final Level level = Level.fromJson(
        data: levelData as Map<String, dynamic>,
        game: this
      );
      levels.add(level);
    }
    for (final GameObject obj in objects) {
      if (obj.targetLevelIndex != null) {
        obj.targetLevel = levels[obj.targetLevelIndex];
      }
      for (final int index in obj.containedObjectIndices) {
        obj.contains.add(objects[index]);
      }
    }
    {{#variables}}
    if (data.containsKey('{{name}}')) {
      {{name}} = data['{{name}}'] as {{type}};
    }
    {{/variables}}
    resetVolumes();
  }

  {{# variables}}
  {{#initialise}}
  {{type}} {{name}};
  {{/initialise}}
  {{/ variables }}

  List<Level> levels;
  List<GameObject> objects;
  Sound moveSound, activateSound, searchFailSound, searchSuccessSound;
  Music music;

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{
      'levels': <Map<String, dynamic>>[],
      'objects': <Map<String, dynamic>>[]
    };
    for (final Level level in levels) {
      data['levels'].add(
        level.toJson(
          game: this
        )
      );
    }
    for (final GameObject object in objects) {
      data['objects'].add(
        object.toJson(
          game: this
        )
      );
    }
    {{#variables}}
    data['{{name}}'] = {{name}};
    {{/variables}}
    return data;
  }

  void reset() {
    stopMusic();
    moveSound = Sound(url: moveSoundUrl);
    activateSound = Sound(url: activateSoundUrl);
    searchFailSound = Sound(url:searchFailUrl);
    searchSuccessSound = Sound(url: searchSuccessUrl);
    levels = <Level>[];
    objects = <GameObject>[];
    {{#variables}}
    {{name}} = {{value}};
    {{/variables}}
    resetVolumes();
  }

  void resetVolumes() {
    mainGain.gain.value = initialVolume;
    if (music != null) {
      music.output.gain.value = initialMusicVolume;
    }
  }

  void stopMusic() {
    if (music != null) {
      final num when = audio.currentTime + (musicFadeout * 10);
      music.stop(when);
      music.output.gain.setTargetAtTime(0.0, audio.currentTime, musicFadeout);
      music = null;
    }
  }

  void reloadMusic(Book book) {
    stopMusic();
    book.push(
      Page(
        titleString: 'Reloading game music...',
      )
    );
    book.pop();
  }
}
